class FibonacciGenerator implements Runnable {
    private int n;

    public FibonacciGenerator(int n) {
        this.n = n;
    }

    @Override
    public void run() {
        int a = 0, b = 1;
        System.out.print("Fibonacci Series: ");
        for (int i = 0; i < n; i++) {
            System.out.print(a + " ");
            int temp = a;
            a = b;
            b = temp + b;
            try {
                Thread.sleep(500); 
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // Test cases
        int[] testCases = { 7, -10, 0 }; // Add more test cases if needed

        for (int i = 0; i < testCases.length; i++) {
            Thread thread = new Thread(new FibonacciGenerator(Math.abs(testCases[i])));
            thread.setName("Thread " + (i + 1) + " (Fibonacci " + Math.abs(testCases[i]) + ")");
            thread.start();
            try {
                thread.join(); // Wait for each thread to finish before proceeding to the next one
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(); // Print a new line after each test case
        }
    }
}
