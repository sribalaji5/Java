public class PalindromePartitioning {

    public static int minCut(String s) {
        int n = s.length();
        
        boolean[][] isPalindrome = new boolean[n][n];
        
        int[] cuts = new int[n];
        
        for (int i = 0; i < n; i++) {
            cuts[i] = i;
        }
        
        for (int end = 0; end < n; end++) {
            for (int start = 0; start <= end; start++) {
                // Check if substring from start to end is palindrome
                if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || isPalindrome[start + 1][end - 1])) {
                    isPalindrome[start][end] = true;
                    
                    // If start is 0, no cut is needed, else update cuts array
                    if (start == 0) {
                        cuts[end] = 0;
                    } else {
                        cuts[end] = Math.min(cuts[end], cuts[start - 1] + 1);
                    }
                }
            }
        }
        
        return cuts[n - 1];
    }

    public static void main(String[] args) {
        String s = "aabbc";
        System.out.println("Minimum cuts needed: " + minCut(s)); // Output: 2
    }
}
