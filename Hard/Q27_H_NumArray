class NumArray {
    int[] nums;
    int[] tree;
    int n;

    public NumArray(int[] nums) {
        this.nums = nums;
        this.n = nums.length;
        this.tree = new int[4 * n];
        buildTree(0, 0, n - 1);
    }

    private void buildTree(int index, int start, int end) {
        if (start == end) {
            tree[index] = nums[start];
            return;
        }
        int mid = start + (end - start) / 2;
        buildTree(2 * index + 1, start, mid);
        buildTree(2 * index + 2, mid + 1, end);
        tree[index] = tree[2 * index + 1] + tree[2 * index + 2];
    }

    public void update(int index, int val) {
        updateTree(0, 0, n - 1, index, val);
    }

    private void updateTree(int treeIndex, int start, int end, int index, int val) {
        if (start == end) {
            nums[index] = val;
            tree[treeIndex] = val;
            return;
        }
        int mid = start + (end - start) / 2;
        if (index <= mid) {
            updateTree(2 * treeIndex + 1, start, mid, index, val);
        } else {
            updateTree(2 * treeIndex + 2, mid + 1, end, index, val);
        }
        tree[treeIndex] = tree[2 * treeIndex + 1] + tree[2 * treeIndex + 2];
    }

    public int sumRange(int left, int right) {
        return query(0, 0, n - 1, left, right);
    }

    private int query(int treeIndex, int start, int end, int left, int right) {
        if (start > right || end < left) {
            return 0;
        }
        if (start >= left && end <= right) {
            return tree[treeIndex];
        }
        int mid = start + (end - start) / 2;
        int leftSum = query(2 * treeIndex + 1, start, mid, left, right);
        int rightSum = query(2 * treeIndex + 2, mid + 1, end, left, right);
        return leftSum + rightSum;
    }
}

public class Main {
    public static void main(String[] args) {
        NumArray numArray = new NumArray(new int[]{1, 3, 5});
        System.out.println(numArray.sumRange(0, 2)); // Output: 9
        numArray.update(1, 2);
        System.out.println(numArray.sumRange(0, 2)); // Output: 8
    }
}
