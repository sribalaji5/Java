import java.util.HashSet;

public class UniquePermutations {
    public static void main(String[] args) {
        int givenNumber = 143;
        System.out.println("Given Number: " + givenNumber);
        System.out.println("Permutations are:");
        printUniquePermutations(givenNumber);
    }

    public static void printUniquePermutations(int num) {
        HashSet<String> set = new HashSet<>();
        permute(String.valueOf(num), 0, set);
        for (String permutation : set) {
            System.out.println(permutation);
        }
    }

    private static void permute(String str, int l, HashSet<String> set) {
        if (l == str.length()) {
            set.add(str);
        } else {
            for (int i = l; i < str.length(); i++) {
                str = swap(str, l, i);
                permute(str, l + 1, set);
                str = swap(str, l, i);
            }
        }
    }

    private static String swap(String a, int i, int j) {
        char temp;
        char[] charArray = a.toCharArray();
        temp = charArray[i];
        charArray[i] = charArray[j];
        charArray[j] = temp;
        return String.valueOf(charArray);
    }
}
